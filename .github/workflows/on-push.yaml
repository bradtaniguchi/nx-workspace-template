name: on-push
on:
  # run on push
  push:
    branches:
      - '**'

jobs:
  # generates the execution matrix, so github-actions knows what to spin-up
  # within the `core-pipeline`
  gen-matrix:
    name: gen matrix
    timeout-minutes: 5
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: ubuntu-latest
    outputs:
      TASKS: ${{ steps.gen-matrix.outputs.TASKS }}
    steps:
      - name: checkout repo
        uses: actions/checkout@v2
        with:
          # get lfs items
          lfs: false
          # fetch all commits, slower but required to pass to nx
          fetch-depth: 0
      - name: setup node
        uses: actions/setup-node@v2
        with:
          node-version: '16.10.0'
          cache: 'npm'
      - name: cache dependencies
        id: cache
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci --ignore-scripts
      - name: install global nx
        run: npm install -g @nrwl/cli
      - name: gen matrix
        id: gen-matrix
        run: |
          TASKS=$(node ./tools/nrwl-utils/gen-matrix.js $GITHUB_REF)
          echo "::set-output name=TASKS::$TASKS"

  # Prints the dependencies of the project into a public graph. To be used later in
  # with other jobs. Generates a static artifact
  gen-dep-graph:
    name: gen dep-graph
    timeout-minutes: 5
    if: "!contains(github.event.head_commit.message, 'skip ci') && github.ref == 'refs/heads/main'"
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v2
        with:
          # get lfs items
          lfs: false
          # fetch all commits, slower but required to pass to nx
          fetch-depth: 0
      - name: setup node
        uses: actions/setup-node@v2
        with:
          node-version: '16.10.0'
          cache: 'npm'
      - name: cache dependencies
        id: cache
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci --ignore-scripts
      - name: install global nx
        run: npm install -g @nrwl/cli
      - name: nx:report
        run: nx report
      - name: nx:workspace-lint
        run: nx workspace-lint
      - name: gen dep-graph
        run: nx dep-graph --file=dist/dep-graph/index.html
      - name: upload dep-graph
        uses: actions/upload-artifact@v2
        with:
          name: dep-graph
          path: dist/dep-graph
          retention-days: 3

  # Runs compodoc and uploads the generated documentation to the artifacts. To be used later
  # to build out an "internal" app.
  gen-docs:
    name: gen docs
    timeout-minutes: 5
    if: "!contains(github.event.head_commit.message, 'skip ci') && github.ref == 'refs/heads/main'"
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v2
        with:
          # get lfs items
          lfs: true
          # fetch all commits, slower but required to pass to nx
          fetch-depth: 0
      - name: setup node
        uses: actions/setup-node@v2
        with:
          node-version: '16.10.0'
          cache: 'npm'
      - name: cache dependencies
        id: cache
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci --ignore-scripts
      - name: install global nx
        run: npm install -g @nrwl/cli
      - name: gen-docs
        run: nx run docs-generator:html
      - name: upload dep-graph
        uses: actions/upload-artifact@v2
        with:
          name: docs
          path: dist/docs
          retention-days: 3
  # Runs tooling to build the "config" script. Can be used for multiple builds within
  # the pipeline.
  build-config:
    name: build config
    timeout-minutes: 5
    if: "!contains(github.event.head_commit.message, 'skip ci') && github.ref == 'refs/heads/main'"
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v2
        with:
          # get lfs items
          lfs: false
          # fetch all commits, slower but required to pass to nx
          fetch-depth: 0
      - name: setup node
        uses: actions/setup-node@v2
        with:
          node-version: '16.10.0'
          cache: 'npm'
      - name: cache dependencies
        id: cache
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci --ignore-scripts
      - name: install global nx
        run: npm install -g @nrwl/cli
      - name: build-config
        run: nx run build-config:generate
      - name: upload build-config
        uses: actions/upload-artifact@v2
        with:
          name: build-config
          path: dist/config.json
          retention-days: 3
  # Gathers both the docs generated by compodoc under the `gen-docs` job, and the
  # dep-graph assets generated by `nx` under the `gen-dep-graph` job
  # and deploys them to github-pages.
  # This is only a **framework** example of a pipeline.
  # TODO: Add storybook, "internal app"
  static-deploy:
    name: static deploy
    timeout-minutes: 5
    if: "!contains(github.event.head_commit.message, 'skip ci') && github.ref == 'refs/heads/main'"
    runs-on: ubuntu-latest
    needs: [gen-docs, gen-dep-graph, build-config]
    steps:
      - name: checkout repo
        uses: actions/checkout@v2
      - name: make dist folder
        run: mkdir dist
      - uses: actions/download-artifact@v2
        with:
          name: docs
          path: dist/docs
      - uses: actions/download-artifact@v2
        with:
          name: dep-graph
          path: dist/dep-graph
      - uses: actions/download-artifact@v2
        with:
          name: build-config
          path: dist/build-config
      - name: move landing page
        run: cp tools/bare-internal/index.html dist/index.html
      - name: deploy
        uses: JamesIves/github-pages-deploy-action@4.1.8
        with:
          branch: gh-pages
          folder: dist

  # Prints the matrix output, useful for debugging
  # See the bottom of this file for an example printout.
  print-matrix:
    name: print matrix
    timeout-minutes: 5
    runs-on: ubuntu-latest
    needs: [gen-matrix]
    steps:
      - name: print matrix
        run: echo "${{ needs.gen-matrix.outputs.TASKS }}"

  # Ran for each of the tasks within the matrix, all in parallel.
  core-pipeline:
    name: core pipeline
    timeout-minutes: 10
    runs-on: ubuntu-latest
    if: ${{ needs.gen-matrix.outputs.TASKS != '[]' }}
    needs:
      - gen-matrix
      - print-matrix
    strategy:
      matrix:
        TASK: ${{ fromJSON(needs.gen-matrix.outputs.TASKS) }}
    steps:
      - name: checkout repo
        uses: actions/checkout@v2
        with:
          # get lfs items
          lfs: true
          # fetch all commits, slower but required to pass to nx
          fetch-depth: 0
      - name: setup node
        uses: actions/setup-node@v2
        with:
          node-version: '16.10.0'
          cache: 'npm'
      - name: cache dependencies
        id: cache
        uses: actions/cache@v2
        with:
          path: ./node_modules
          key: modules-${{ hashFiles('package-lock.json') }}
      - name: install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci --ignore-scripts

      # Example task:
      # { id: "common:lint", project: "common", target: "lint", dependencies: [] },
      - name: print task-id
        run: |
          echo "${{ matrix.TASK.id }}"

      - name: execute task
        run: npx nx run ${{ matrix.TASK.id }}
# Example print-matrix output
# [
#   { id: "common:lint", project: "common", target: "lint", dependencies: [] },
#   {
#     id: "common-ngrx:lint",
#     project: "common-ngrx",
#     target: "lint",
#     dependencies: [],
#   },
#   {
#     id: "ng-logger:lint",
#     project: "ng-logger",
#     target: "lint",
#     dependencies: ["common:lint"],
#   },
#   { id: "common:test", project: "common", target: "test", dependencies: [] },
#   {
#     id: "common-ngrx:test",
#     project: "common-ngrx",
#     target: "test",
#     dependencies: [],
#   },
#   {
#     id: "ng-logger:test",
#     project: "ng-logger",
#     target: "test",
#     dependencies: ["common:test"],
#   },
# ];
